{"version":3,"file":"photoswipe-lightbox.esm-D-XvkvPg.js","sources":["../node_modules/.pnpm/photoswipe@5.4.3/src/js/util/util.js","../node_modules/.pnpm/photoswipe@5.4.3/src/js/core/eventable.js","../node_modules/.pnpm/photoswipe@5.4.3/src/js/slide/placeholder.js","../node_modules/.pnpm/photoswipe@5.4.3/src/js/slide/content.js","../node_modules/.pnpm/photoswipe@5.4.3/src/js/util/viewport-size.js","../node_modules/.pnpm/photoswipe@5.4.3/src/js/slide/zoom-level.js","../node_modules/.pnpm/photoswipe@5.4.3/src/js/slide/loader.js","../node_modules/.pnpm/photoswipe@5.4.3/src/js/core/base.js","../node_modules/.pnpm/photoswipe@5.4.3/src/js/lightbox/lightbox.js"],"sourcesContent":["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n","/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thumbnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thumbnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n * @prop {(preventPointerEvent: boolean, event: PointerEvent, pointerType: string) => boolean} preventPointerEvent\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n","import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n","import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n","const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n","import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n","import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n","import {\r\n  specialKeyUsed,\r\n  getElementsFromOption,\r\n  isPswpClass\r\n} from '../util/util.js';\r\n\r\nimport PhotoSwipeBase from '../core/base.js';\r\nimport { lazyLoadSlide } from '../slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n    this.shouldOpen = false;\r\n    /**\r\n     * @private\r\n     * @type {Content | undefined}\r\n     */\r\n    this._preloadedContent = undefined;\r\n\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp) { // ... if PhotoSwipe is already open\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not the ideal way to detect them.\r\n    //\r\n    /** @type {Point | null} */\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    /** @type {DataSource} */\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   * @returns {number}\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   * @param {Point | null} [initialPoint]\r\n   * @returns {boolean}\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp || !this.options) {\r\n      return false;\r\n    }\r\n\r\n    // Use the first gallery element if dataSource is not provided\r\n    if (!dataSource && this.options.gallery && this.options.children) {\r\n      const galleryElements = getElementsFromOption(this.options.gallery);\r\n      if (galleryElements[0]) {\r\n        dataSource = {\r\n          gallery: galleryElements[0]\r\n        };\r\n      }\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name]?.forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name]?.forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = undefined;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = undefined;\r\n      delete window.pswp;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    this.pswp?.destroy();\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = {};\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeLightbox;\r\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","setWidthHeight","w","h","style","width","height","LOAD_STATE","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isSafari","navigator","vendor","match","PhotoSwipeEvent","constructor","type","details","this","defaultPrevented","Object","assign","preventDefault","Eventable","_listeners","_filters","pswp","undefined","options","addFilter","name","fn","priority","_this$_filters$name","_this$_filters$name2","_this$pswp","push","sort","f1","f2","removeFilter","filter","applyFilters","args","_this$_filters$name3","forEach","apply","on","_this$_listeners$name","_this$pswp2","off","_this$pswp3","listener","dispatch","_this$_listeners$name2","event","call","Placeholder","imageSrc","container","element","imgEl","decoding","alt","src","setAttribute","setDisplayedSize","transformOrigin","transform","x","y","scale","propValue","toTransformString","destroy","_this$element","parentNode","remove","Content","itemData","instance","index","data","placeholder","slide","displayedImageWidth","displayedImageHeight","Number","isAttached","hasSlide","isDecoding","state","content","removePlaceholder","keepPlaceholder","setTimeout","load","isLazy","reload","usePlaceholder","placeholderEl","parentElement","prepend","placeholderSrc","msrc","isFirstSlide","isImageContent","loadImage","innerHTML","html","updateContentSize","_this$data$src","_this$data$alt","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","isActive","heavyAppended","append","displayError","isError","isLoading","isInitialSizeUpdate","isZoomable","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","lazyLoad","_this$instance$option","_this$instance$option2","errorMsgEl","innerText","errorMsg","supportsDecode","decode","catch","finally","appendImage","activate","holderElement","deactivate","parsePaddingOption","prop","viewportSize","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","ZoomLevel","panAreaSize","elementSize","fit","fill","vFill","initial","secondary","max","min","update","maxWidth","maxHeight","hRatio","vRatio","Math","_getInitial","_getSecondary","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","currZoomLevel","lazyLoadData","createContentFromData","zoomLevel","getViewportSizeFn","newViewportSize","documentElement","clientWidth","window","innerHeight","getViewportSize","getPanAreaSize","ceil","PhotoSwipeBase","getNumItems","_this$options","numItems","dataSource","length","items","_getGalleryDOMElements","gallery","getItemData","_this$options2","dataSourceItem","_domElementToItemData","galleryElement","_this$options3","_this$options4","children","childSelector","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","_thumbnailEl$getAttri","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","PhotoSwipeLightbox","super","_uid","shouldOpen","_preloadedContent","onThumbnailsClick","bind","init","gallerySelector","addEventListener","e","button","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","initialPoint","clientX","clientY","clickedIndex","getClickedIndex","currentTarget","loadAndOpen","getClickedIndexFn","clickedTarget","target","clickedChildIndex","findIndex","child","contains","galleryElements","initialPointerPos","preload","promiseArray","pswpModuleType","pswpModule","prototype","goTo","Promise","resolve","Error","openPromise","preloadFirstSlide","lazyLoadSlide","uid","all","then","iterableModules","mainModule","_openPhotoswipe","module","default","keys","contentLoader","addToCache","removeEventListener"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}